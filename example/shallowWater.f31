begin function (u_next,v_next,h_next) = update (u,v,h)
#     non-linear shallow water equations
#     du/dt + d/dx (u^2/h + G h^2/2) + d/dy(uv/h) = F v + Nu (d^2u/dx^2 + d^2u/dy^2)
#     dv/dt + d/dx (uv/h) + d/dy (v^2/h + G h^2/2) = - F u + Nu (d^2v/dx^2 + d^2v/dy^2)
#     dh/dt + du/dx + dv/dy = Kh (d^2h/dx^2 + d^2h/dy^2)

      float :: F = 1.0  # coriolis parameter
      float :: G = 1.0  # reduced gravity
      float :: H = 1.0  # mean layer thickness
      float :: Nu = 1.0 # viscosity coefficient
      float :: Kh = 1.0 # diffusion coefficient
      float :: dx = 0.005
      float :: dy = 0.005
      float :: dt = 0.001

      float[,] :: uu, uv, vv, ghh

      float[,] :: duudx, duvdy
      float[,] :: duvdx, dvvdy

      float[,] :: dhdx, dhdy

      float[,] :: d2udx2, d2udy2
      float[,] :: d2vdx2, d2vdy2
      float[,] :: d2hdx2, d2hdy2

      float[,] :: dudt, dvdt, dhdt

      ghh = G * h * h * 0.5
      uu = u * u / h + ghh
      uv = u * v / h
      vv = v * v / h + ghh

      duudx = ( uu[,1] - uu[,-1] ) / (2.0*dx)
      duvdy = ( uv[1,] - uv[-1,] ) / (2.0*dy)
      duvdx = ( uv[,1] - uv[,-1] ) / (2.0*dx)
      dvvdy = ( vv[1,] - vv[-1,] ) / (2.0*dy)

      dhdx = ( h[,1] - h[,-1] ) / (2.0*dx)
      dhdy = ( h[1,] - h[-1,] ) / (2.0*dy)

      d2udx2 = ( u[,1] - u*2 + u[,-1] ) / (dx*dx)
      d2udy2 = ( u[1,] - u*2 + u[-1,] ) / (dy*dy)
      d2vdx2 = ( v[,1] - v*2 + v[,-1] ) / (dx*dx)
      d2vdy2 = ( v[1,] - v*2 + v[-1,] ) / (dy*dy)
      d2hdx2 = ( h[,1] - h*2 + h[,-1] ) / (dx*dx)
      d2hdy2 = ( h[1,] - h*2 + h[-1,] ) / (dy*dy)

      dudt = - ( duudx + duvdy ) + F * v + Nu * ( d2udx2 + d2udy2 )
      dvdt = - ( duvdx + dvvdy ) - F * u + Nu * ( d2vdx2 + d2vdy2 )
      dhdt = - ( dudx + dvdy ) + Kh * ( d2hdx2 + d2hdy2 )

      u_next = u + dt * dudt
      v_next = v + dt * dvdt
      h_next = h + dt * dhdt
end function
